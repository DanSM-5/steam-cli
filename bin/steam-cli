#!/bin/bash

STEAM_CMD=$(which steamcmd)
STEAM_DIR="$HOME/.steam"
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/steam-cli"

steamcli_usage() {
  cat <<EOF
Usage: steam-cli <command> (--id=<app-id>|--name=<app-name>)
                           [--platform=<platform>]
                           [--bitness=<bitness>]
                           [--language=<language>]
                           [--games-dir=<directory>]
                           [--steam-dir=<directory>]
Commands:
  install             Download and install game
  execute             Execute installed game
  list                List all available games
  update-cache        Update cached game list

Mandatory options:
  -i, --id            AppID of the game
  -n, --name          Name of the game

Other options:
  -p, --platform      Platform to install
  -b, --bitness       Bitness of the platform
  -l, --language      Language of the game to install
  -g, --games-dir     Directory where to find installed games
  -s, --steam-dir     Directory where to find steam [default: ~/.steam]
EOF
}

steamcli_options() {
  echo "local app_id"
  echo "local app_name"
  echo "local app_cmd"
  echo "local platform=linux"
  echo "local language=${LANG%_*}"
  echo "STEAM_DIR=$HOME/.steam"
  echo "GAMES_DIR="
  case "$(uname -m)" in
    "x86_64") echo "local bitness=64";;
    *) echo "local bitness=32";;
  esac

  command=$1; shift;
  local params="$(getopt -o 'i:n:c:p:l:b:g:s:h' -l 'id:,name:,command:,platform:,language:,bitness:,games-dir:,steam-dir:,help' -n "$command" -- "$@")"
  [ $? -ne 0 ] && steamcli_usage && return 1

  eval set -- "$params"
  while true; do
    case "$1" in
      -i|--id)
          case "$2" in
              "") shift 2;;
              *) echo "local app_id=\"$2\""; shift 2;;
          esac;;
      -n|--name)
          case "$2" in
              "") shift 2;;
              *) echo "local app_name=\"$2\""; shift 2;;
          esac;;
      -c|--command)
          case "$2" in
              "") shift 2;;
              *) echo "local app_cmd=\"$2\""; shift 2;;
          esac;;
      -p|--platform)
          case "$2" in
              "") shift 2;;
              *) echo "platform=\"$2\""; shift 2;;
          esac;;
      -l|--language)
          case "$2" in
              "") shift 2;;
              *) echo "language=\"$2\""; shift 2;;
          esac;;
      -b|--bitness)
          case "$2" in
              "") shift 2;;
              *) echo "bitness=\"$2\""; shift 2;;
          esac;;
      -g|--games-dir)
          case "$2" in
              "") shift 2;;
              *) echo "GAMES_DIR=\"$2\""; shift 2;;
          esac;;
      -s|--steam-dir)
          case "$2" in
              "") shift 2;;
              *) echo "STEAM_DIR=\"$2\""; shift 2;;
          esac;;
      -h|--help) shift;;
      --) shift; break;;
      *) echo "Internal error!"; exit 1;;
    esac
  done
}

fixutf8() {
  echo -en "$(echo -en "$(uconv -f "UTF-8" -t "ASCII" --callback escape | sed -re 's/\\/\\\\/g; s/%X([0-9A-F]{2})/\\x\1/g')" | uconv -f "Windows-1252" -t "ASCII" --callback escape | sed -re 's/\\/\\\\/g; s/%U([0-9A-F]{4})/\\u\1/g')"
}

vdf2json() {
  tr -s '\n\r' ' ' | sed -re 's@^@{@; s@\\@\\\\@g; s@\\\\"\\\\"@\\"\\"@g; s@([^\\])\\\\"@\1\\"@g; s@\s+@ @g; s@"\s*\{@": {@g; s@"\s*"(([^"\\]|\\.)*)"@": "\1",@g; s@,:\s*\{\s*}@@g; s@}@},@g; s@$@}@; s@,\s*}@}@g'
}

vdf2file() {
  mkdir -p "$1" && awk -v "dst=$1/$2" '/^"[^"]*"$/ { f=$1; gsub(/"/, "", f); printf("") > dst f ".vdf"} { print $0 >> dst f ".vdf" }'
}

steamcli() {
  local username
  if [ -f "$STEAM_DIR/registry.vdf" ]; then
    username=$(cat "$STEAM_DIR/registry.vdf" | vdf2json | jq -rc '.[].HKCU.Software.Valve.Steam.AutoLoginUser')
  elif [ -f "$STEAM_DIR/config/config.vdf" ]; then
    username=$(cat "$STEAM_DIR/config/config.vdf" | vdf2json | jq -rc ".InstallConfigStore.Software.Valve.Steam.Accounts | keys[0]")
  elif [ -f "$STEAM_DIR/steam/config/config.vdf" ]; then
    username=$(cat "$STEAM_DIR/steam/config/config.vdf" | vdf2json | jq -rc ".InstallConfigStore.Software.Valve.Steam.Accounts | keys[0]")
  fi
  $STEAM_CMD +@NoPromptForPassword 1 +login $username "$@" +quit
}

steamcli_login() {
  local username
  if [ -f "$STEAM_DIR/registry.vdf" ]; then
    username=$(cat "$STEAM_DIR/registry.vdf" | vdf2json | jq -rc '.[].HKCU.Software.Valve.Steam.AutoLoginUser')
  elif [ -f "$STEAM_DIR/config/config.vdf" ]; then
    username=$(cat "$STEAM_DIR/config/config.vdf" | vdf2json | jq -rc ".InstallConfigStore.Software.Valve.Steam.Accounts | keys[0]")
  elif [ -f "$STEAM_DIR/steam/config/config.vdf" ]; then
    username=$(cat "$STEAM_DIR/steam/config/config.vdf" | vdf2json | jq -rc ".InstallConfigStore.Software.Valve.Steam.Accounts | keys[0]")
  fi
  echo -n "Password: (leave empty to use cached password) " && read -s password && echo
  $STEAM_CMD +@NoPromptForPassword 1 +login $username $password "$@" +quit
}

steamcli_cache() {
  local cache_file="${CACHE_DIR}/$1"; shift
  if [ -f "${cache_file}" ]; then
    cat "${cache_file}"
  else
    steamcli "$@" | sed -e '1,/Waiting for user info...OK/d' | fixutf8 | tee "${cache_file}"
  fi
}

steamcli_pkg_ids() {
  steamcli_cache "licenses.out" +licenses_print | grep "License packageID" | awk '{gsub(":",""); print $3}'
}

steamcli_pkg_info() {
  steamcli_cache "pkg-$1.vdf" +package_info_print "$1" | vdf2json
}

steamcli_pkg_infos() {
  steamcli_cache "pkgs.vdf" $(printf '+package_info_print %s ' $(steamcli_pkg_ids)) | vdf2json
}

steamcli_app_ids() {
  steamcli_pkg_infos | jq ".[].appids|.[]" -r
}

steamcli_app_info() {
  steamcli_cache "app-$1.vdf" +app_info_print "$1" | vdf2json
}

steamcli_app_infos() {
  steamcli_cache "apps.vdf" $(printf '+app_info_print %s ' $(steamcli_app_ids)) | grep -v '^AppID :' | vdf2json
}

steamcli_app_names() {
  steamcli_app_infos | jq -cr '.[]|select(.common.type == "game" or .common.type == "Game").common.name' | sort
}

steamcli_app_folder() {
  local app_id=$1
  local platform=${2:-linux}
  steamcli_app_info "$app_id" | jq -rc ".[]?.config|.installdir"
}

steamcli_app_command() {
  local app_id=$1
  local platform=${2:-linux}
  local bitness=${3:-64}
  steamcli_app_info "$app_id" | jq -rc ".[]?.config.launch|.[]?|select(.config.oslist == \"$platform\" and (.config.osarch == \"$bitness\" or .config.osarch == null) and .config.betakey == null)|.executable + \" \" + .arguments"
}

steamcli_app_install() {
  eval $(steamcli_options "steamcli_app_install" "$@")
  if [ -z "$app_name" -a -z "$app_id" ]; then
    steamcli_usage && return 1
  elif [ -z "$app_id" ]; then
    app_id=$(steamcli_app_infos | jq -rc ".[]|select(.common.name == \"$app_name\").common.gameid")
  fi
  local app_folder=$(steamcli_app_folder "$app_id" "$platform")

  local script=$(mktemp)
  if [ ! -z "$GAMES_DIR" ]; then
    echo "force_install_dir \"$GAMES_DIR/$app_folder\"" > "$script"
    mkdir -p "$GAMES_DIR/$app_folder"
  fi
  steamcli +runscript "$script" +@sSteamCmdForcePlatformType "$platform" +@sSteamCmdForcePlatformBitness "$bitness" +app_update "$app_id" -validate -language "$language"
  rm "$script"
}

steamcli_app_execute() {
  eval $(steamcli_options "steamcli_app_run" "$@")
  if [ -z "$app_name" -a -z "$app_id" ]; then
    steamcli_usage && return 1
  elif [ -z "$app_id" ]; then
    app_id=$(steamcli_app_infos | jq -rc ".[]|select(.common.name == \"$app_name\").common.gameid")
  fi
  if [ -z "$app_cmd" ]; then
    app_cmd=$(steamcli_app_command "$app_id" "$platform" "$bitness")
  fi
  local app_folder="${GAMES_DIR:-$STEAM_DIR/steam/steamapps/common}/$(steamcli_app_folder "$app_id" "$platform")"

  [ ! -d "$app_folder" ] && echo "Couldn't find $app_folder, maybe the game isn't installed?" && return 1

  pushd "$app_folder"
  case "$platform-$bitness" in
    linux-*) "$STEAM_DIR/ubuntu12_32/steam-runtime/run.sh" ./$app_cmd;;
    windows-64) WINEPREFIX="$(pwd)/.wine64" wine64 $app_cmd;;
    windows-32) WINEPREFIX="$(pwd)/.wine32" wine32 $app_cmd;;
  esac
  popd
}

steamcli_update_cache() {
  rm "$CACHE_DIR/"* -rf
  echo -n "Loading packages..."
  steamcli_pkg_infos 1>/dev/null
  echo "done"
  echo -n "Loading apps..."
  steamcli_app_infos 1>/dev/null
  echo "done"
}

command="$1"; shift
case "$command" in
  install) steamcli_app_install "$@";;
  execute) steamcli_app_execute "$@";;
  list) steamcli_app_names "$@";;
  update-cache) steamcli_update_cache "$@";;
  --) "$@";;
  *) steamcli_usage "$@";;
esac
